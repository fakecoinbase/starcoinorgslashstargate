syntax = "proto3";

package chain;

import "transaction.proto";
import "events.proto";
import "access_path.proto";
import "proof.proto";
import "off_chain_transaction.proto";

service Chain {
    rpc LeastStateRoot(LeastRootRequest) returns (LeastRootResponse);
    rpc Faucet(FaucetRequest) returns (FaucetResponse);
    rpc GetAccountStateWithProofByStateRoot(GetAccountStateWithProofByStateRootRequest) returns (GetAccountStateWithProofByStateRootResponse);
    rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
    rpc SubmitOffChainTransaction(star_types.OffChainTransaction) returns (SubmitTransactionResponse);
    rpc WatchTransaction (WatchTransactionRequest) returns (stream WatchTransactionResponse);
    rpc StateByAccessPath(types.AccessPath) returns (StateByAccessPathResponse);
    rpc WatchEvent(WatchEventRequest) returns (stream WatchEventResponse);
    rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashResponse);
}

message GetTransactionByHashRequest {
    bytes state_root_hash = 1;
}

message GetTransactionByHashResponse {
    types.SignedTransaction signed_tx = 1;
}

message WatchEventRequest {
    bytes address = 1;
    oneof start_tx {
        uint64 index = 2;
    }
}

message WatchEventResponse {
    repeated types.Event events = 1;
}

message LeastRootRequest {
}

message LeastRootResponse {
    bytes state_root_hash = 1;
}

message FaucetRequest {
    bytes address = 1;
    uint64 amount = 2;
}

message FaucetResponse {}

message AccountResource {
    bytes resource = 1;
}

message StateByAccessPathResponse {
    AccountResource account_resource = 1;
}

message GetAccountStateWithProofByStateRootRequest {
    bytes address = 1;
    bytes state_root_hash = 2;
}

message GetAccountStateWithProofByStateRootResponse {
    Blob account_state_blob = 1;
}

message WatchTransactionRequest {
    bytes address = 1;
    oneof start_tx {
        uint64 index = 2;
    }
}

message WatchTransactionResponse {
    types.SignedTransaction signed_txn = 1;
    repeated types.Event events = 2;
}

message SubmitTransactionRequest {
  types.SignedTransaction signed_txn = 1;
}

message SubmitTransactionResponse {
  oneof status {
    MempoolAddTransactionStatus mempool_status = 1;
  }
}

enum MempoolAddTransactionStatusCode {
  Valid = 0;
  InsufficientBalance = 1;
  InvalidSeqNumber = 2;
  MempoolIsFull = 3;
  TooManyTransactions = 4;
  InvalidUpdate = 5;
}

message MempoolAddTransactionStatus {
  MempoolAddTransactionStatusCode code = 1;
  string message = 2;
}

//AccountStateBlob
message Blob {
    bytes blob = 1;
}